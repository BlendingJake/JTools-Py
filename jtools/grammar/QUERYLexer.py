# Generated from jtools/grammar/QUERY.g4 by ANTLR 4.8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\36")
        buf.write("\u009d\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\3\2")
        buf.write("\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3")
        buf.write("\b\3\t\3\t\3\n\3\n\3\13\3\13\3\f\3\f\3\r\3\r\3\16\3\16")
        buf.write("\3\16\3\16\3\16\3\17\3\17\3\17\3\17\3\17\3\17\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\21\3\21\3\22\3\22\3\23\3\23\3\24\3\24")
        buf.write("\3\25\3\25\3\26\3\26\3\27\3\27\3\30\3\30\3\31\6\31v\n")
        buf.write("\31\r\31\16\31w\3\32\6\32{\n\32\r\32\16\32|\3\33\3\33")
        buf.write("\3\34\3\34\3\34\3\34\7\34\u0085\n\34\f\34\16\34\u0088")
        buf.write("\13\34\3\34\3\34\3\34\3\34\3\34\7\34\u008f\n\34\f\34\16")
        buf.write("\34\u0092\13\34\3\34\5\34\u0095\n\34\3\35\6\35\u0098\n")
        buf.write("\35\r\35\16\35\u0099\3\35\3\35\2\2\36\3\3\5\4\7\5\t\6")
        buf.write("\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20")
        buf.write("\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65")
        buf.write("\34\67\359\36\3\2\b\3\2\62;\4\2C\\c|\6\2#\61<A]b}\u0080")
        buf.write("\3\2$$\3\2))\5\2\13\f\16\17\"\"\2\u00a4\2\3\3\2\2\2\2")
        buf.write("\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3")
        buf.write("\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2")
        buf.write("\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2")
        buf.write("\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3")
        buf.write("\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61")
        buf.write("\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2")
        buf.write("\2\2\3;\3\2\2\2\5=\3\2\2\2\7?\3\2\2\2\tA\3\2\2\2\13C\3")
        buf.write("\2\2\2\rE\3\2\2\2\17G\3\2\2\2\21J\3\2\2\2\23L\3\2\2\2")
        buf.write("\25N\3\2\2\2\27P\3\2\2\2\31R\3\2\2\2\33T\3\2\2\2\35Y\3")
        buf.write("\2\2\2\37_\3\2\2\2!d\3\2\2\2#f\3\2\2\2%h\3\2\2\2\'j\3")
        buf.write("\2\2\2)l\3\2\2\2+n\3\2\2\2-p\3\2\2\2/r\3\2\2\2\61u\3\2")
        buf.write("\2\2\63z\3\2\2\2\65~\3\2\2\2\67\u0094\3\2\2\29\u0097\3")
        buf.write("\2\2\2;<\7B\2\2<\4\3\2\2\2=>\7\"\2\2>\6\3\2\2\2?@\7\f")
        buf.write("\2\2@\b\3\2\2\2AB\7\17\2\2B\n\3\2\2\2CD\7\13\2\2D\f\3")
        buf.write("\2\2\2EF\7\16\2\2F\16\3\2\2\2GH\7B\2\2HI\7B\2\2I\20\3")
        buf.write("\2\2\2JK\7\60\2\2K\22\3\2\2\2LM\7&\2\2M\24\3\2\2\2NO\7")
        buf.write("*\2\2O\26\3\2\2\2PQ\7.\2\2Q\30\3\2\2\2RS\7+\2\2S\32\3")
        buf.write("\2\2\2TU\7v\2\2UV\7t\2\2VW\7w\2\2WX\7g\2\2X\34\3\2\2\2")
        buf.write("YZ\7h\2\2Z[\7c\2\2[\\\7n\2\2\\]\7u\2\2]^\7g\2\2^\36\3")
        buf.write("\2\2\2_`\7p\2\2`a\7w\2\2ab\7n\2\2bc\7n\2\2c \3\2\2\2d")
        buf.write("e\7]\2\2e\"\3\2\2\2fg\7_\2\2g$\3\2\2\2hi\7}\2\2i&\3\2")
        buf.write("\2\2jk\7\177\2\2k(\3\2\2\2lm\7<\2\2m*\3\2\2\2no\7/\2\2")
        buf.write("o,\3\2\2\2pq\7-\2\2q.\3\2\2\2rs\7a\2\2s\60\3\2\2\2tv\t")
        buf.write("\2\2\2ut\3\2\2\2vw\3\2\2\2wu\3\2\2\2wx\3\2\2\2x\62\3\2")
        buf.write("\2\2y{\t\3\2\2zy\3\2\2\2{|\3\2\2\2|z\3\2\2\2|}\3\2\2\2")
        buf.write("}\64\3\2\2\2~\177\t\4\2\2\177\66\3\2\2\2\u0080\u0086\7")
        buf.write("$\2\2\u0081\u0082\7^\2\2\u0082\u0085\7$\2\2\u0083\u0085")
        buf.write("\n\5\2\2\u0084\u0081\3\2\2\2\u0084\u0083\3\2\2\2\u0085")
        buf.write("\u0088\3\2\2\2\u0086\u0084\3\2\2\2\u0086\u0087\3\2\2\2")
        buf.write("\u0087\u0089\3\2\2\2\u0088\u0086\3\2\2\2\u0089\u0095\7")
        buf.write("$\2\2\u008a\u0090\7)\2\2\u008b\u008c\7^\2\2\u008c\u008f")
        buf.write("\7)\2\2\u008d\u008f\n\6\2\2\u008e\u008b\3\2\2\2\u008e")
        buf.write("\u008d\3\2\2\2\u008f\u0092\3\2\2\2\u0090\u008e\3\2\2\2")
        buf.write("\u0090\u0091\3\2\2\2\u0091\u0093\3\2\2\2\u0092\u0090\3")
        buf.write("\2\2\2\u0093\u0095\7)\2\2\u0094\u0080\3\2\2\2\u0094\u008a")
        buf.write("\3\2\2\2\u00958\3\2\2\2\u0096\u0098\t\7\2\2\u0097\u0096")
        buf.write("\3\2\2\2\u0098\u0099\3\2\2\2\u0099\u0097\3\2\2\2\u0099")
        buf.write("\u009a\3\2\2\2\u009a\u009b\3\2\2\2\u009b\u009c\b\35\2")
        buf.write("\2\u009c:\3\2\2\2\13\2w|\u0084\u0086\u008e\u0090\u0094")
        buf.write("\u0099\3\b\2\2")
        return buf.getvalue()


class QUERYLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    DIGITS = 24
    LETTERS = 25
    SYMBOL = 26
    STRING = 27
    WS = 28

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'@'", "' '", "'\n'", "'\r'", "'\t'", "'\f'", "'@@'", "'.'", 
            "'$'", "'('", "','", "')'", "'true'", "'false'", "'null'", "'['", 
            "']'", "'{'", "'}'", "':'", "'-'", "'+'", "'_'" ]

    symbolicNames = [ "<INVALID>",
            "DIGITS", "LETTERS", "SYMBOL", "STRING", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "DIGITS", "LETTERS", "SYMBOL", 
                  "STRING", "WS" ]

    grammarFileName = "QUERY.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.8")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


